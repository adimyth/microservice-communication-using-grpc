# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc  # type: ignore

import phone_otp.phoneotp_pb2 as phoneotp__pb2


class PhoneOTPServiceStub(object):
    """service is a collection of RPC methods.
    RPC methods accept a single request message and return a single response message.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendOTP = channel.unary_unary(
            "/phoneotp.PhoneOTPService/SendOTP",
            request_serializer=phoneotp__pb2.SendOTPRequest.SerializeToString,
            response_deserializer=phoneotp__pb2.SendOTPResponse.FromString,
        )
        self.VerifyOTP = channel.unary_unary(
            "/phoneotp.PhoneOTPService/VerifyOTP",
            request_serializer=phoneotp__pb2.VerifyOTPRequest.SerializeToString,
            response_deserializer=phoneotp__pb2.VerifyOTPResponse.FromString,
        )


class PhoneOTPServiceServicer(object):
    """service is a collection of RPC methods.
    RPC methods accept a single request message and return a single response message.
    """

    def SendOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def VerifyOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PhoneOTPServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendOTP": grpc.unary_unary_rpc_method_handler(
            servicer.SendOTP,
            request_deserializer=phoneotp__pb2.SendOTPRequest.FromString,
            response_serializer=phoneotp__pb2.SendOTPResponse.SerializeToString,
        ),
        "VerifyOTP": grpc.unary_unary_rpc_method_handler(
            servicer.VerifyOTP,
            request_deserializer=phoneotp__pb2.VerifyOTPRequest.FromString,
            response_serializer=phoneotp__pb2.VerifyOTPResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "phoneotp.PhoneOTPService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class PhoneOTPService(object):
    """service is a collection of RPC methods.
    RPC methods accept a single request message and return a single response message.
    """

    @staticmethod
    def SendOTP(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/phoneotp.PhoneOTPService/SendOTP",
            phoneotp__pb2.SendOTPRequest.SerializeToString,
            phoneotp__pb2.SendOTPResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def VerifyOTP(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/phoneotp.PhoneOTPService/VerifyOTP",
            phoneotp__pb2.VerifyOTPRequest.SerializeToString,
            phoneotp__pb2.VerifyOTPResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
